/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface PublicResolverInterface extends utils.Interface {
  functions: {
    "addr(bytes32)": FunctionFragment;
    "addr(bytes32,uint256)": FunctionFragment;
    "clearRecords(bytes32)": FunctionFragment;
    "contenthash(bytes32)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "multicallWithNodeCheck(bytes32,bytes[])": FunctionFragment;
    "name(bytes32)": FunctionFragment;
    "recordVersions(bytes32)": FunctionFragment;
    "setAddr(bytes32,uint256,bytes)": FunctionFragment;
    "setAddr(bytes32,address)": FunctionFragment;
    "setAddrs(bytes32,uint256[],bytes[])": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setContenthash(bytes32,bytes)": FunctionFragment;
    "setName(bytes32,string)": FunctionFragment;
    "setText(bytes32,string,string)": FunctionFragment;
    "setTexts(bytes32,string[],string[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "text(bytes32,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addr(bytes32)"
      | "addr(bytes32,uint256)"
      | "clearRecords"
      | "contenthash"
      | "isApprovedForAll"
      | "multicall"
      | "multicallWithNodeCheck"
      | "name"
      | "recordVersions"
      | "setAddr(bytes32,uint256,bytes)"
      | "setAddr(bytes32,address)"
      | "setAddrs"
      | "setApprovalForAll"
      | "setContenthash"
      | "setName"
      | "setText"
      | "setTexts"
      | "supportsInterface"
      | "text"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addr(bytes32)",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addr(bytes32,uint256)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "clearRecords",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "contenthash",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "multicall",
    values: [PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "multicallWithNodeCheck",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "name",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "recordVersions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddr(bytes32,uint256,bytes)",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddr(bytes32,address)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAddrs",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setContenthash",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setName",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setText",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setTexts",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "text",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addr(bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addr(bytes32,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clearRecords",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contenthash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "multicallWithNodeCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordVersions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddr(bytes32,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAddr(bytes32,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddrs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setContenthash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setText", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setTexts", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "text", data: BytesLike): Result;

  events: {
    "AddressChanged(bytes32,uint256,bytes)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "ContenthashChanged(bytes32,bytes)": EventFragment;
    "NameChanged(bytes32,string)": EventFragment;
    "TextChanged(bytes32,string,string,string)": EventFragment;
    "VersionChanged(bytes32,uint64)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ContenthashChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NameChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TextChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VersionChanged"): EventFragment;
}

export interface AddressChangedEventObject {
  node: string;
  coinType: BigNumber;
  newAddress: string;
}
export type AddressChangedEvent = TypedEvent<
  [string, BigNumber, string],
  AddressChangedEventObject
>;

export type AddressChangedEventFilter = TypedEventFilter<AddressChangedEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface ContenthashChangedEventObject {
  node: string;
  hash: string;
}
export type ContenthashChangedEvent = TypedEvent<
  [string, string],
  ContenthashChangedEventObject
>;

export type ContenthashChangedEventFilter =
  TypedEventFilter<ContenthashChangedEvent>;

export interface NameChangedEventObject {
  node: string;
  name: string;
}
export type NameChangedEvent = TypedEvent<
  [string, string],
  NameChangedEventObject
>;

export type NameChangedEventFilter = TypedEventFilter<NameChangedEvent>;

export interface TextChangedEventObject {
  node: string;
  indexedKey: string;
  key: string;
  value: string;
}
export type TextChangedEvent = TypedEvent<
  [string, string, string, string],
  TextChangedEventObject
>;

export type TextChangedEventFilter = TypedEventFilter<TextChangedEvent>;

export interface VersionChangedEventObject {
  node: string;
  newVersion: BigNumber;
}
export type VersionChangedEvent = TypedEvent<
  [string, BigNumber],
  VersionChangedEventObject
>;

export type VersionChangedEventFilter = TypedEventFilter<VersionChangedEvent>;

export interface PublicResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PublicResolverInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "addr(bytes32)"(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "addr(bytes32,uint256)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    clearRecords(
      node: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contenthash(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    multicallWithNodeCheck(
      nodehash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    name(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    recordVersions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "setAddr(bytes32,uint256,bytes)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "setAddr(bytes32,address)"(
      node: PromiseOrValue<BytesLike>,
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddrs(
      node: PromiseOrValue<BytesLike>,
      coinTypes: PromiseOrValue<BigNumberish>[],
      addrs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setContenthash(
      node: PromiseOrValue<BytesLike>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setName(
      node: PromiseOrValue<BytesLike>,
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setText(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTexts(
      node: PromiseOrValue<BytesLike>,
      keys: PromiseOrValue<string>[],
      values: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    text(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  "addr(bytes32)"(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  "addr(bytes32,uint256)"(
    node: PromiseOrValue<BytesLike>,
    coinType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  clearRecords(
    node: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contenthash(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    account: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  multicall(
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  multicallWithNodeCheck(
    nodehash: PromiseOrValue<BytesLike>,
    data: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  name(
    node: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  recordVersions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "setAddr(bytes32,uint256,bytes)"(
    node: PromiseOrValue<BytesLike>,
    coinType: PromiseOrValue<BigNumberish>,
    a: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "setAddr(bytes32,address)"(
    node: PromiseOrValue<BytesLike>,
    a: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddrs(
    node: PromiseOrValue<BytesLike>,
    coinTypes: PromiseOrValue<BigNumberish>[],
    addrs: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setContenthash(
    node: PromiseOrValue<BytesLike>,
    hash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setName(
    node: PromiseOrValue<BytesLike>,
    newName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setText(
    node: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<string>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTexts(
    node: PromiseOrValue<BytesLike>,
    keys: PromiseOrValue<string>[],
    values: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceID: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  text(
    node: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    "addr(bytes32)"(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    "addr(bytes32,uint256)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    clearRecords(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    contenthash(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    multicallWithNodeCheck(
      nodehash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    name(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    recordVersions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setAddr(bytes32,uint256,bytes)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "setAddr(bytes32,address)"(
      node: PromiseOrValue<BytesLike>,
      a: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAddrs(
      node: PromiseOrValue<BytesLike>,
      coinTypes: PromiseOrValue<BigNumberish>[],
      addrs: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setContenthash(
      node: PromiseOrValue<BytesLike>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setName(
      node: PromiseOrValue<BytesLike>,
      newName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setText(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTexts(
      node: PromiseOrValue<BytesLike>,
      keys: PromiseOrValue<string>[],
      values: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    text(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "AddressChanged(bytes32,uint256,bytes)"(
      node?: PromiseOrValue<BytesLike> | null,
      coinType?: null,
      newAddress?: null
    ): AddressChangedEventFilter;
    AddressChanged(
      node?: PromiseOrValue<BytesLike> | null,
      coinType?: null,
      newAddress?: null
    ): AddressChangedEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "ContenthashChanged(bytes32,bytes)"(
      node?: PromiseOrValue<BytesLike> | null,
      hash?: null
    ): ContenthashChangedEventFilter;
    ContenthashChanged(
      node?: PromiseOrValue<BytesLike> | null,
      hash?: null
    ): ContenthashChangedEventFilter;

    "NameChanged(bytes32,string)"(
      node?: PromiseOrValue<BytesLike> | null,
      name?: null
    ): NameChangedEventFilter;
    NameChanged(
      node?: PromiseOrValue<BytesLike> | null,
      name?: null
    ): NameChangedEventFilter;

    "TextChanged(bytes32,string,string,string)"(
      node?: PromiseOrValue<BytesLike> | null,
      indexedKey?: PromiseOrValue<string> | null,
      key?: null,
      value?: null
    ): TextChangedEventFilter;
    TextChanged(
      node?: PromiseOrValue<BytesLike> | null,
      indexedKey?: PromiseOrValue<string> | null,
      key?: null,
      value?: null
    ): TextChangedEventFilter;

    "VersionChanged(bytes32,uint64)"(
      node?: PromiseOrValue<BytesLike> | null,
      newVersion?: null
    ): VersionChangedEventFilter;
    VersionChanged(
      node?: PromiseOrValue<BytesLike> | null,
      newVersion?: null
    ): VersionChangedEventFilter;
  };

  estimateGas: {
    "addr(bytes32)"(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addr(bytes32,uint256)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clearRecords(
      node: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contenthash(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    multicallWithNodeCheck(
      nodehash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    name(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recordVersions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setAddr(bytes32,uint256,bytes)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "setAddr(bytes32,address)"(
      node: PromiseOrValue<BytesLike>,
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddrs(
      node: PromiseOrValue<BytesLike>,
      coinTypes: PromiseOrValue<BigNumberish>[],
      addrs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setContenthash(
      node: PromiseOrValue<BytesLike>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setName(
      node: PromiseOrValue<BytesLike>,
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setText(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTexts(
      node: PromiseOrValue<BytesLike>,
      keys: PromiseOrValue<string>[],
      values: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    text(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "addr(bytes32)"(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "addr(bytes32,uint256)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clearRecords(
      node: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contenthash(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      account: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    multicall(
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    multicallWithNodeCheck(
      nodehash: PromiseOrValue<BytesLike>,
      data: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    name(
      node: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    recordVersions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setAddr(bytes32,uint256,bytes)"(
      node: PromiseOrValue<BytesLike>,
      coinType: PromiseOrValue<BigNumberish>,
      a: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "setAddr(bytes32,address)"(
      node: PromiseOrValue<BytesLike>,
      a: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddrs(
      node: PromiseOrValue<BytesLike>,
      coinTypes: PromiseOrValue<BigNumberish>[],
      addrs: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setContenthash(
      node: PromiseOrValue<BytesLike>,
      hash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setName(
      node: PromiseOrValue<BytesLike>,
      newName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setText(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTexts(
      node: PromiseOrValue<BytesLike>,
      keys: PromiseOrValue<string>[],
      values: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    text(
      node: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
